仓库版本管理：git
	git是对文件仓库进行版本管理的语言，在git管理本地仓库的基础上，还有github网站供网上版本管理使用

git版本管理的原理
	git将区域分为：工作区、暂存区、版本区
		.git内为版本库【分为暂存区+版本区】，外为工作区
		工作区：当前文件状态
		暂存区：文件被add后进入暂存区，暂存起来【可以add ./add 单独文件】
		版本区：多个版本串联、分支【与VMWare的快照类似】；
		版本区工作原理：
			A->B,A版本是一个状态
				当B版本为静态时，B版本就是一个状态记录
				B版本为动态时，B版本记录的是在A版本状态后发生的哪些变化
			HEAD是头状态的指针【未加入版本的动态状态，是不被HEAD所指向的】
				HEAD^^^代表头状态的前第3个版本
				HEAD~3也代表当前状态的前面第三个版本
1. git的仓库创建
	创建本地仓库：git init 生成.git文件，是git版本管理的基础文件
	克隆外网仓库：git clone + HTTP... ，下载别人的仓库内容到本地浏览
2. 基本指令：
		git add 加入文件到暂存区
		git commit -m '说明' 提交暂存区内容到版本区形成当前版本，并注释
		git log 查看版本信息	，只显示HEAD之前的版本信息
		git reflog 查看所有的提交和reset信息【HEAD移动信息】，返回值为版本的Identity
		git reset 回退HEAD指针到一个具体状态，修改工作区状态
			--hard 只是单纯移动HEAD指针，不会真的删除路径上其他的版本节点
				HEAD前移：eg: git reset --hard HEAD^  回退到上一个状态
					【一个很有意思的点，HEAD代表当前状态,^^^代表之前的状态，
						相当于用文字方式描述了链表的状态】
				HEAD后移：回到以前的节点：使用git reflog 查看之前的版本身份号，
					使用git reset --hard 身份号 前进 
					git reflog git reset --hard 身份号
		git status 查看在工作区、暂存区中文件相比于版本区的对比状态
		git checkout -- 文件名 工作区中单独恢复上一个版本这个文件的状态
		git reset HEAD 文件名 暂存区中的文件修改被丢弃，不会影响工作区文件；
			如果再提交新的该文件修改到暂存区，则覆盖暂存区中原文件修改
		git diff 版本 -- 文件 / 版本1 版本2 -- 文件名
			git diff HEAD -- code.txt 对比最近的版本状态和code文件的差异对比
			git HEAD HEAD^ -- code.txt 对比最近版本和前一个版本的code文件差异
				diff中+++/---代表的是那个版本文件本身的名字【注意看注释】
		
	




















